// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"order-service/consumer"
	"order-service/consumer/handler"
	"order-service/internal/biz"
	"order-service/internal/conf"
	"order-service/internal/data"
	"order-service/internal/publisher"
	"order-service/internal/redis"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confData *conf.Data, confConsumer *conf.Consumer, confPublisher *conf.Publisher, logger log.Logger) (*consumer.OrderConsumer, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	ordersRepository := data.NewOrdersRepository(dataData, logger)
	redisHandlerInterface := redis.NewCache(confData, logger)
	publisherInterface := publisher.NewPublisher(logger, confPublisher)
	ordersHandlerInterface := biz.NewOrdersHandler(ordersRepository, redisHandlerInterface, publisherInterface, logger)
	syncOrderInterface := handler.NewSyncOrderHandler(logger, ordersRepository, ordersHandlerInterface)
	orderConsumer, err := consumer.NewOrderConsumer(confConsumer, syncOrderInterface, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return orderConsumer, func() {
		cleanup()
	}, nil
}
