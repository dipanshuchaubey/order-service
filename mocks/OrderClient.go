// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "order-service/api/v1/order"
)

// OrderClient is an autogenerated mock type for the OrderClient type
type OrderClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderClient) CreateOrder(ctx context.Context, in *v1.CreateOrderRequest, opts ...grpc.CallOption) (*v1.CreateOrderReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *v1.CreateOrderReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest, ...grpc.CallOption) (*v1.CreateOrderReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest, ...grpc.CallOption) *v1.CreateOrderReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateOrderReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrderClient) GetAllOrders(ctx context.Context, in *v1.GetAllOrdersForUserRequest, opts ...grpc.CallOption) (*v1.GetAllOrdersForUserReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 *v1.GetAllOrdersForUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAllOrdersForUserRequest, ...grpc.CallOption) (*v1.GetAllOrdersForUserReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAllOrdersForUserRequest, ...grpc.CallOption) *v1.GetAllOrdersForUserReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetAllOrdersForUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetAllOrdersForUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderClient creates a new instance of OrderClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderClient {
	mock := &OrderClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
