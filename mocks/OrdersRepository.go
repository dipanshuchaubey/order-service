// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "order-service/internal/data/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrdersRepository is an autogenerated mock type for the OrdersRepository type
type OrdersRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *OrdersRepository) CreateOrder(_a0 context.Context, _a1 *entity.OrdersEntity) (*entity.OrdersEntity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *entity.OrdersEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.OrdersEntity) (*entity.OrdersEntity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.OrdersEntity) *entity.OrdersEntity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.OrdersEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.OrdersEntity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: ctx
func (_m *OrdersRepository) GetAllOrders(ctx context.Context) ([]*entity.OrdersEntity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []*entity.OrdersEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.OrdersEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.OrdersEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrdersEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetails provides a mock function with given fields: ctx, orderID
func (_m *OrdersRepository) GetOrderDetails(ctx context.Context, orderID string) (*entity.OrdersEntity, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderDetails")
	}

	var r0 *entity.OrdersEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.OrdersEntity, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.OrdersEntity); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.OrdersEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *OrdersRepository) GetOrdersByCustomerID(ctx context.Context, customerID string) ([]*entity.OrdersEntity, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByCustomerID")
	}

	var r0 []*entity.OrdersEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.OrdersEntity, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.OrdersEntity); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrdersEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrdersRepository creates a new instance of OrdersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersRepository {
	mock := &OrdersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
