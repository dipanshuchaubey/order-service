// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	v1 "order-service/api/v1/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderServer is an autogenerated mock type for the OrderServer type
type OrderServer struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServer) CreateOrder(_a0 context.Context, _a1 *v1.CreateOrderRequest) (*v1.CreateOrderReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *v1.CreateOrderReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest) (*v1.CreateOrderReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest) *v1.CreateOrderReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateOrderReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: _a0, _a1
func (_m *OrderServer) GetAllOrders(_a0 context.Context, _a1 *v1.GetAllOrdersForUserRequest) (*v1.GetAllOrdersForUserReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 *v1.GetAllOrdersForUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAllOrdersForUserRequest) (*v1.GetAllOrdersForUserReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAllOrdersForUserRequest) *v1.GetAllOrdersForUserReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetAllOrdersForUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetAllOrdersForUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedOrderServer provides a mock function with given fields:
func (_m *OrderServer) mustEmbedUnimplementedOrderServer() {
	_m.Called()
}

// NewOrderServer creates a new instance of OrderServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServer {
	mock := &OrderServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
