// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "order-service/api/v1/order"
)

// OrdersHandlerInterface is an autogenerated mock type for the OrdersHandlerInterface type
type OrdersHandlerInterface struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, req
func (_m *OrdersHandlerInterface) CreateOrder(ctx context.Context, req *v1.CreateOrderRequest) (*v1.CreateOrderReply, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *v1.CreateOrderReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest) (*v1.CreateOrderReply, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateOrderRequest) *v1.CreateOrderReply); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateOrderReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersForUser provides a mock function with given fields: ctx, userID
func (_m *OrdersHandlerInterface) GetOrdersForUser(ctx context.Context, userID string) ([]*v1.OrderData, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersForUser")
	}

	var r0 []*v1.OrderData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*v1.OrderData, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*v1.OrderData); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.OrderData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, orderID
func (_m *OrdersHandlerInterface) UpdateOrder(ctx context.Context, orderID string) (*v1.CreateOrderReply, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *v1.CreateOrderReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.CreateOrderReply, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.CreateOrderReply); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateOrderReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrdersHandlerInterface creates a new instance of OrdersHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersHandlerInterface {
	mock := &OrdersHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
